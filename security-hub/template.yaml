AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: sumo-security-hub
    Description: Sumologic AWS Security Hub Application.
    Author: user1
    SpdxLicenseId: Apache-2.0
    LicenseUrl: ".\/..\/licence.txt"
    ReadmeUrl: ".\/README.md"
    Labels: ['tests']
    HomePageUrl: https://github.com/user1/my-app-project
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/user1/my-app-project

Parameters:
  EnableSecurityHub:
    Type: String
    Default: "no"
    AllowedValues: ["yes", "no"]
  S3BucketName:
    Type: String
  CollectorName:
    Type: String
  SumoAccessID:
    Type: String
  SumoAccessKey:
    Type: String
  SumoDeployment:
    Type: String
  ConnectionName:
    Type: String
  RemoveSumoResourcesOnDeleteStack:
    Type: String
  SourceName:
    Type: String
  SourceCategoryName:
    Type: String
  PathExpression:
    Type: String
  ExternalID:
    Type: String
  CreateTargetS3Bucket:
    Type: String
    Default: "no"
    AllowedValues: ["yes", "no"]

Conditions:
  EnableSecurityHub: !Equals [ !Ref EnableSecurityHub, "yes" ]
  CreateBucket: !Equals [ !Ref CreateTargetS3Bucket, "yes" ]

Resources:
  SecurityHubForwarder:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:956882708938:applications/sumologic-securityhub-forwarder
        SemanticVersion: 1.0.7
  SecurityHubCollector:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:956882708938:applications/sumologic-securityhub-collector
        SemanticVersion: 1.0.8
      Parameters:
        S3SourceBucketName: !Ref S3BucketName
  SecurityHubUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: SecurityHubUser
  SecurityHubUser:
    Type: AWS::IAM::User
    Properties:
      UserName: SecurityHubUser
      Policies:
        - PolicyName: apigatewayaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/POST/findings
  SecurityHubConfiguration:
    Type: AWS::SecurityHub::Hub
    Condition: EnableSecurityHub

  SumoAppUtils:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: main.handler
      Runtime: python3.7
      CodeUri: "..\/sumologic-app-utils/src/"
      MemorySize: 128
      Timeout: 300

  SumoHostedCollector:
    Type: Custom::Collector
    Properties:
      ServiceToken: !GetAtt SumoAppUtils.Arn
      Region: !Ref "AWS::Region"
      CollectorType: Hosted
      RemoveOnDeleteStack: !Ref RemoveSumoResourcesOnDeleteStack
      CollectorName: !Ref CollectorName
      SumoAccessID: !Ref SumoAccessID
      SumoAccessKey: !Ref SumoAccessKey
      SumoDeployment: !Ref SumoDeployment

  SumoS3Source:
    Type: Custom::S3Source
    Properties:
      ServiceToken: !GetAtt SumoAppUtils.Arn
      Region: !Ref "AWS::Region"
      SourceName: !Ref SourceName
      TargetBucketName: !Ref S3BucketName
      RemoveOnDeleteStack: !Ref RemoveSumoResourcesOnDeleteStack
      SourceCategory: !Ref SourceCategoryName
      CollectorId: !GetAtt SumoHostedCollector.COLLECTOR_ID
      SumoAccessID: !Ref SumoAccessID
      SumoAccessKey: !Ref SumoAccessKey
      SumoDeployment: !Ref SumoDeployment
      PathExpression: !Ref PathExpression
      RoleArn: !GetAtt SumoRole.Arn

  Connections:
    Type: Custom::Connections
    Properties:
      ServiceToken: !GetAtt SumoAppUtils.Arn
      Type: "WebhookDefinition"
      Name: !Ref ConnectionName
      Description: "Webhook Lambda connection for SecurityHub"
      URL: !GetAtt SecurityHubForwarder.Outputs.SecurityHubForwarderApiUrl
      UserName: !Ref SecurityHubUserKey
      Password: !GetAtt SecurityHubUserKey.SecretAccessKey
      Region: !Ref "AWS::Region"
      ServiceName: 'execute-api'
      WebhookType: 'AWSLambda'
      SumoAccessID: !Ref SumoAccessID
      SumoAccessKey: !Ref SumoAccessKey
      SumoDeployment: !Ref SumoDeployment

  SumoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: arn:aws:iam::926226587429:root
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: ExternalID
      Path: "/"
      Policies:
      - PolicyName: SumoPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucketVersions
              - s3:ListBucket
            Resource:
              - !Sub 
                - arn:aws:s3:::${S3bucketName}
                - { S3bucketName: !Ref S3BucketName }
              - !Sub
                - arn:aws:s3:::${S3bucketName}/*
                - { S3bucketName: !Ref S3BucketName  }

  SecurityHubCollectorS3BucketName:
    Type: AWS::S3::Bucket
    Condition: CreateBucket
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
          TopicConfigurations:
            -
              Event: s3:ObjectCreated:Put
              Topic: !Ref sumoS3SorceTopic

  sumoS3SorceTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub "SumoSNSTopic-${AWS::StackName}"

  sumoSNSSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: 
        Ref: sumoS3SorceTopic
      Endpoint: !GetAtt SumoS3Source.SUMO_ENDPOINT
      Protocol: https
      DeliveryPolicy:
       healthyRetryPolicy:
         numRetries: 40
         minDelayTarget: 10
         maxDelayTarget: 300
         numMinDelayRetries: 3
         numMaxDelayRetries: 5
         numNoDelayRetries: 0
         backoffFunction: exponential

  sumoSNSpolicy:
   Properties:
     PolicyDocument:
       Id: SumoTopicPolicy
       Statement:
         -
           Action: "sns:Publish"
           Condition:
             StringEquals:
               aws:SourceAccount: !Ref "AWS::AccountId"
             ArnLike:
               aws:SourceArn: !Sub "arn:aws:s3:*:*:${S3BucketName}"
           Effect: Allow
           Principal:
             AWS: "*"
           Resource:
             Ref: sumoS3SorceTopic
     Topics:
       -
         Ref: sumoS3SorceTopic
   Type: "AWS::SNS::TopicPolicy"

  SumoAWSSecurityHubApp:
    Type: Custom::App
    Properties:
      ServiceToken: !GetAtt SumoAppUtils.Arn
      Region: !Ref "AWS::Region"
      AppName: "AWS Security Hub"
      AppId: "246cf87b-99b6-47cb-bde0-3fe1cb76c6b4"
      RemoveOnDeleteStack: !Ref RemoveSumoResourcesOnDeleteStack
      AppSources:
        findingSrc: !Sub "_sourceCategory=${SourceCategoryName}"
      SumoAccessID: !Ref SumoAccessID
      SumoAccessKey: !Ref SumoAccessKey
      SumoDeployment: !Ref SumoDeployment

Outputs:
  SecurityHubUserKey:
    Description: Access Key of User
    Value:
      Ref: SecurityHubUserKey
  SecretKeyForSecurityHubUser:
    Description: Security Access Key of User
    Value:
      Fn::GetAtt:
        - SecurityHubUserKey
        - SecretAccessKey
  SecurityHubArn:
    Condition: EnableSecurityHub
    Value:
      Ref: SecurityHubConfiguration